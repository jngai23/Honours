headata <- duperemove(headata)
colcount <- ncol(headata)
headsamp <- sample(1:nrow(headata), 0.8 * nrow(headata))
headtest <- headata[-headsamp,]
headtrain <- headata[headsamp,]
headtest <- duperemove(headtest)
headtrain <- duperemove(headtrain)
colcount <- ncol(headtrain)
x <- headtrain[,2:colcount]
y <- headtrain$Toxicity_Value
control <- trainControl(method="repeatedcv", number=10, repeats=3)
metric <- "Accuracy"
set.seed(seed)
mtry <- 12
tunegrid <- expand.grid(.mtry=mtry)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
tunegrid <- expand.grid(.mtry=c(10:15), .ntree=c(125, 150, 175, 200))
set.seed(seed)
custom <- train(Toxicity_Value~., data=headata, method=customRF,
metric=metric, tuneGrid=tunegrid,
trControl=control, na.action = na.exclude)
custom
plot(custom)
tunegrid <- expand.grid(.mtry=c(5:10), .ntree=c(125, 150, 175, 200))
set.seed(seed)
custom <- train(Toxicity_Value~., data=headata, method=customRF,
metric=metric, tuneGrid=tunegrid,
trControl=control, na.action = na.exclude)
custom
plot(custom)
#Data reading
#endodata <- read_csv("Documents/test/caret_stuff/final.csv")
endodata <- padel_out_tox
#Selecting data sample from set (~12000 datapoints)
headata <- sample_n(endodata[,2:(ncol(endodata))], 1000)
#Removes Null cells
#headata <- headata[, colSums(is.na(headata)) == 0]
headata$Toxicity_Value = as.factor(headata$Toxicity_Value)
#Removes Duplicate columns
#As each character in a SMILE is its own data point, if the longest SMILE is not
#In the sample, the extra columns need removing
duperemove <- function(data) {
dupecol <- sapply(data, function(col) length(unique(col)) == 1)
data[, !dupecol, drop = FALSE]
}
headata <- duperemove(headata)
colcount <- ncol(headata)
headsamp <- sample(1:nrow(headata), 0.8 * nrow(headata))
headtest <- headata[-headsamp,]
headtrain <- headata[headsamp,]
headtest <- duperemove(headtest)
headtrain <- duperemove(headtrain)
colcount <- ncol(headtrain)
x <- headtrain[,2:colcount]
y <- headtrain$Toxicity_Value
control <- trainControl(method="repeatedcv", number=10, repeats=3)
metric <- "Accuracy"
set.seed(seed)
mtry <- 12
tunegrid <- expand.grid(.mtry=c(5:10), .ntree=c(125, 150, 175, 200))
set.seed(seed)
custom <- train(Toxicity_Value~., data=headata, method=customRF,
metric=metric, tuneGrid=tunegrid,
trControl=control, na.action = na.exclude)
custom
plot(custom)
#Data reading
#endodata <- read_csv("Documents/test/caret_stuff/final.csv")
endodata <- normspedata
#Selecting data sample from set (~12000 datapoints)
headata <- sample_n(endodata[,2:(ncol(endodata))], 1000)
#Removes Null cells
#headata <- headata[, colSums(is.na(headata)) == 0]
headata$Toxicity_Value = as.factor(headata$Toxicity_Value)
#Removes Duplicate columns
#As each character in a SMILE is its own data point, if the longest SMILE is not
#In the sample, the extra columns need removing
duperemove <- function(data) {
dupecol <- sapply(data, function(col) length(unique(col)) == 1)
data[, !dupecol, drop = FALSE]
}
headata <- duperemove(headata)
colcount <- ncol(headata)
headsamp <- sample(1:nrow(headata), 0.8 * nrow(headata))
headtest <- headata[-headsamp,]
headtrain <- headata[headsamp,]
headtest <- duperemove(headtest)
headtrain <- duperemove(headtrain)
colcount <- ncol(headtrain)
x <- headtrain[,2:colcount]
y <- headtrain$Toxicity_Value
control <- trainControl(method="repeatedcv", number=10, repeats=3)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
tunegrid <- expand.grid(.mtry=c(5:10), .ntree=c(125, 150, 175, 200))
set.seed(seed)
custom <- train(Toxicity_Value~., data=headata, method=customRF,
metric=metric, tuneGrid=tunegrid,
trControl=control, na.action = na.exclude)
custom
plot(custom)
View(headata)
View(headata)
featurePlot(x = headata[, 1:307], y = headata$Toxicity_Value, plot = 'box')
featurePlot(x = headata[, 1:307], y = headata$Toxicity_Value, plot = 'box')
Errors()
warnings()
featurePlot(x = headata[, 1:307], y = headata$Toxicity_Value, plot = 'box', strip=strip.custom(par.strip.text=list(cex=.7)),
scales = list(x = list(relation="free"),
y = list(relation="free")))
featurePlot(x = headata[, 2:307], y = headata$Toxicity_Value, plot = 'box')
featurePlot(x = headata[, 2:10], y = headata$Toxicity_Value, plot = 'box')
help(featurePlot)
featurePlot(x = normspedata[, 2:10], y = normspedata$Toxicity_Value, plot = 'box')
normspedata
View(normspedata)
featurePlot(x = normspedata[, 3:10], y = normspedata$Toxicity_Value, plot = 'box')
normspedata$Toxicity_Value = as.factor(normspedata$Toxicity_Value)
featurePlot(x = normspedata[, 3:10], y = normspedata$Toxicity_Value, plot = 'box')
featurePlot(x = normspedata[, 3:10], y = normspedata$Toxicity_Value, plot = 'density')
featurePlot(x = normspedata[, 3:100], y = normspedata$Toxicity_Value, plot = 'density')
featurePlot(x = normspedata[, 90:100], y = normspedata$Toxicity_Value, plot = 'density')
featurePlot(x = normspedata[, 90:99], y = normspedata$Toxicity_Value, plot = 'density')
featurePlot(x = normspedata[, 90:98], y = normspedata$Toxicity_Value, plot = 'density')
featurePlot(x = normspedata[, 3:6], y = normspedata$Toxicity_Value, plot = 'density')
featurePlot(x = normspedata[, 90:98], y = normspedata$Toxicity_Value, plot = 'density', scales = list(x = list(relation="free"),
y = list(relation="free")))
featurePlot(x = normspedata[, 3:7], y = normspedata$Toxicity_Value, plot = 'density', scales = list(x = list(relation="free"),
y = list(relation="free")))
featurePlot(x = normspedata[, 3:7], y = normspedata$Toxicity_Value, plot = 'scatter')
featurePlot(x = normspedata[, 3:7], y = normspedata$Toxicity_Value, plot = 'scatter')
#Data reading
#endodata <- read_csv("Documents/test/caret_stuff/final.csv")
endodata <- deepnormspedata
#Selecting data sample from set (~12000 datapoints)
headata <- sample_n(endodata[,2:(ncol(endodata))], 1000)
#Removes Null cells
#headata <- headata[, colSums(is.na(headata)) == 0]
headata$Toxicity_Value = as.factor(headata$Toxicity_Value)
normspedata$Toxicity_Value = as.factor(normspedata$Toxicity_Value)
deepnormspedata$Toxicity_Value = as.factor(deepnormspedata$Toxicity_Value)
#Removes Duplicate columns
#As each character in a SMILE is its own data point, if the longest SMILE is not
#In the sample, the extra columns need removing
duperemove <- function(data) {
dupecol <- sapply(data, function(col) length(unique(col)) == 1)
data[, !dupecol, drop = FALSE]
}
headata <- duperemove(headata)
colcount <- ncol(headata)
headsamp <- sample(1:nrow(headata), 0.8 * nrow(headata))
headtest <- headata[-headsamp,]
headtrain <- headata[headsamp,]
headtest <- duperemove(headtest)
headtrain <- duperemove(headtrain)
colcount <- ncol(headtrain)
x <- headtrain[,2:colcount]
y <- headtrain$Toxicity_Value
control <- trainControl(method="repeatedcv", number=10, repeats=3)
metric <- "Accuracy"
set.seed(seed)
mtry <- 12
featurePlot(x = deepnormspedata[, 3:7], y = deepnormspedata$Toxicity_Value, plot = 'scatter')
featurePlot(x = deepnormspedata[, 3:7], y = deepnormspedata$Toxicity_Value, plot = 'box')
View(deepnormspedata)
library(readr)
deepspedata <- read_csv("Documents/Hons Stuff/Preprocessing/smilePE/deepspedata.csv")
View(deepspedata)
#Data reading
#endodata <- read_csv("Documents/test/caret_stuff/final.csv")
endodata <- deepspedata
#Selecting data sample from set (~12000 datapoints)
headata <- sample_n(endodata[,2:(ncol(endodata))], 1000)
#Removes Null cells
#headata <- headata[, colSums(is.na(headata)) == 0]
headata$Toxicity_Value = as.factor(headata$Toxicity_Value)
deepnormspedata$Toxicity_Value = as.factor(deepnormspedata$Toxicity_Value)
#Removes Duplicate columns
#As each character in a SMILE is its own data point, if the longest SMILE is not
#In the sample, the extra columns need removing
duperemove <- function(data) {
dupecol <- sapply(data, function(col) length(unique(col)) == 1)
data[, !dupecol, drop = FALSE]
}
headata <- duperemove(headata)
colcount <- ncol(headata)
headsamp <- sample(1:nrow(headata), 0.8 * nrow(headata))
headtest <- headata[-headsamp,]
headtrain <- headata[headsamp,]
headtest <- duperemove(headtest)
headtrain <- duperemove(headtrain)
colcount <- ncol(headtrain)
x <- headtrain[,2:colcount]
y <- headtrain$Toxicity_Value
control <- trainControl(method="repeatedcv", number=10, repeats=3)
metric <- "Accuracy"
set.seed(seed)
mtry <- 12
control <- trainControl(method="repeatedcv", number=10, repeats=3)
tunegrid <- expand.grid(.mtry=c(5:10), .ntree=c(125, 150, 175, 200))
set.seed(seed)
custom <- train(Toxicity_Value~., data=headata, method=customRF,
metric=metric, tuneGrid=tunegrid,
trControl=control, na.action = na.exclude)
custom
plot(custom)
RMSE(custom, headata$Toxicity_Value)
predict(custom, headata)
RMSE((predict(custom, headata))), headata$Toxicity_Value)
bing <- predict(custom, headata)
RMSE(bing, headata$Toxicity_Value)
View(headtest)
View(headtrain)
library(readr)
UMAPdata <- read_csv("Documents/Honours/Python/Preprocessing/Notebooks/UMAPdata.csv")
View(UMAPdata)
#Data reading
#endodata <- read_csv("Documents/test/caret_stuff/final.csv")
endodata <- UMAPdata[,2:]
#Data reading
#endodata <- read_csv("Documents/test/caret_stuff/final.csv")
endodata <- UMAPdata
library(readr)
UMAPdata <- read_csv("Documents/Honours/Python/Preprocessing/Notebooks/UMAPdata.csv")
View(UMAPdata)
#Data reading
#endodata <- read_csv("Documents/test/caret_stuff/final.csv")
endodata <- UMAPdata
#Selecting data sample from set (~12000 datapoints)
headata <- sample_n(endodata[,3:(ncol(endodata))], 1000)
library(caret)
library(mlbench)
library(randomForest)
library(dplyr)
library(ada)
library(parallel)
library(doParallel)
seed <- 81
set.seed(seed)
#Data reading
#endodata <- read_csv("Documents/test/caret_stuff/final.csv")
endodata <- UMAPdata
#Selecting data sample from set (~12000 datapoints)
headata <- sample_n(endodata[,3:(ncol(endodata))], 1000)
#Removes Null cells
#headata <- headata[, colSums(is.na(headata)) == 0]
headata$Toxicity_Value = as.factor(headata$Toxicity_Value)
deepnormspedata$Toxicity_Value = as.factor(deepnormspedata$Toxicity_Value)
#Removes Duplicate columns
#As each character in a SMILE is its own data point, if the longest SMILE is not
#In the sample, the extra columns need removing
duperemove <- function(data) {
dupecol <- sapply(data, function(col) length(unique(col)) == 1)
data[, !dupecol, drop = FALSE]
}
headata <- duperemove(headata)
colcount <- ncol(headata)
headsamp <- sample(1:nrow(headata), 0.8 * nrow(headata))
headtest <- headata[-headsamp,]
headtrain <- headata[headsamp,]
headtest <- duperemove(headtest)
headtrain <- duperemove(headtrain)
colcount <- ncol(headtrain)
x <- headtrain[,2:colcount]
y <- headtrain$Toxicity_Value
control <- trainControl(method="repeatedcv", number=10, repeats=3)
metric <- "Accuracy"
set.seed(seed)
mtry <- 12
tunegrid <- expand.grid(.mtry=mtry)
#Custom Algo creation
#Code snippet taken from "https://machinelearningmastery.com/tune-machine-learning-algorithms-in-r/"
#*Temporary, to be rewritten and adjusted for usage
customRF <- list(type = "Classification", library = "randomForest", loop = NULL)
customRF$parameters <- data.frame(parameter = c("mtry", "ntree"), class = rep("numeric", 2), label = c("mtry", "ntree"))
customRF$grid <- function(x, y, len = NULL, search = "grid") {}
customRF$fit <- function(x, y, wts, param, lev, last, weights, classProbs, ...) {
randomForest(x, y, mtry = param$mtry, ntree=param$ntree, ...)
}
customRF$predict <- function(modelFit, newdata, preProc = NULL, submodels = NULL)
predict(modelFit, newdata)
customRF$prob <- function(modelFit, newdata, preProc = NULL, submodels = NULL)
predict(modelFit, newdata, type = "prob")
customRF$sort <- function(x) x[order(x[,1]),]
customRF$levels <- function(x) x$classes
control <- trainControl(method="repeatedcv", number=10, repeats=3)
tunegrid <- expand.grid(.mtry=c(5:10), .ntree=c(125, 150, 175, 200))
set.seed(seed)
custom <- train(Toxicity_Value~., data=headata, method=customRF,
metric=metric, tuneGrid=tunegrid,
trControl=control, na.action = na.exclude)
custom
plot(custom)
library(readr)
UMAPdata <- read_csv("Documents/Honours/Python/Preprocessing/Notebooks/UMAPdata.csv")
View(UMAPdata)
#Data reading
#endodata <- read_csv("Documents/test/caret_stuff/final.csv")
endodata <- UMAPdata
#Selecting data sample from set (~12000 datapoints)
headata <- sample_n(endodata[,3:(ncol(endodata))], 1000)
#Removes Null cells
#headata <- headata[, colSums(is.na(headata)) == 0]
headata$Toxicity_Value = as.factor(headata$Toxicity_Value)
deepnormspedata$Toxicity_Value = as.factor(deepnormspedata$Toxicity_Value)
#Removes Duplicate columns
#As each character in a SMILE is its own data point, if the longest SMILE is not
#In the sample, the extra columns need removing
duperemove <- function(data) {
dupecol <- sapply(data, function(col) length(unique(col)) == 1)
data[, !dupecol, drop = FALSE]
}
headata <- duperemove(headata)
colcount <- ncol(headata)
headsamp <- sample(1:nrow(headata), 0.8 * nrow(headata))
headtest <- headata[-headsamp,]
headtrain <- headata[headsamp,]
headtest <- duperemove(headtest)
headtrain <- duperemove(headtrain)
colcount <- ncol(headtrain)
x <- headtrain[,2:colcount]
y <- headtrain$Toxicity_Value
control <- trainControl(method="repeatedcv", number=10, repeats=3)
metric <- "Accuracy"
set.seed(seed)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
tunegrid <- expand.grid(.mtry=c(5:10), .ntree=c(125, 150, 175, 200))
set.seed(seed)
custom <- train(Toxicity_Value~., data=headata, method=customRF,
metric=metric, tuneGrid=tunegrid,
trControl=control, na.action = na.exclude)
custom
plot(custom)
View(deepnormspedata)
#Data reading
#endodata <- read_csv("Documents/test/caret_stuff/final.csv")
endodata <- deepnormspedata
#Selecting data sample from set (~12000 datapoints)
headata <- sample_n(endodata[,2:(ncol(endodata))], 1000)
#Removes Null cells
#headata <- headata[, colSums(is.na(headata)) == 0]
headata$Toxicity_Value = as.factor(headata$Toxicity_Value)
deepnormspedata$Toxicity_Value = as.factor(deepnormspedata$Toxicity_Value)
#Removes Duplicate columns
#As each character in a SMILE is its own data point, if the longest SMILE is not
#In the sample, the extra columns need removing
duperemove <- function(data) {
dupecol <- sapply(data, function(col) length(unique(col)) == 1)
data[, !dupecol, drop = FALSE]
}
headata <- duperemove(headata)
colcount <- ncol(headata)
headsamp <- sample(1:nrow(headata), 0.8 * nrow(headata))
headtest <- headata[-headsamp,]
headtrain <- headata[headsamp,]
headtest <- duperemove(headtest)
headtrain <- duperemove(headtrain)
colcount <- ncol(headtrain)
x <- headtrain[,2:colcount]
y <- headtrain$Toxicity_Value
control <- trainControl(method="repeatedcv", number=10, repeats=3)
custom <- train(Toxicity_Value~., data=headata, method=customRF,
metric=metric, tuneGrid=tunegrid,
trControl=control, na.action = na.exclude)
custom
plot(custom)
source("~/Documents/Honours/R/Algo_Testing/nonlinearsvm.R", echo=TRUE)
View(noparamresults)
m = ksvm(x = as.matrix(xtrain), y = as.factor(y),
kernel = 'vanilladot', type = 'nu-svr', C = 0.01)
p = predict(m, xtest)
resultlist <- vanilpredmetrics(testset, p, type, kernel, cost)
resultlist
p
m = ksvm(x = as.matrix(xtrain), y = as.factor(y),
kernel = 'vanilladot', type = 'C-svc', C = 0.01)
p = predict(m, xtest)
resultlist <- vanilpredmetrics(testset, p, type, kernel, cost)
resultlist
m = ksvm(x = as.matrix(xtrain), y = as.factor(y),
kernel = 'splinedot', type = 'C-svc', C = 0.01)
p = predict(m, xtest)
m
m = ksvm(x = as.matrix(xtrain), y = as.factor(y),
kernel = 'splinedot', type = 'C-svc', C = 0.001)
m
m = ksvm(x = as.matrix(xtrain), y = as.factor(y),
kernel = rbfdot, type = type, C = cost, kpar = 'automatic')
y
m = ksvm(x = as.matrix(xtrain), y = y,
kernel = rbfdot, type = type, C = cost, kpar = 'automatic')
y
y = sapply(y, as.logical)
resultlist <- vanilpredmetrics(testset, p, type, kernel, cost)
m = ksvm(x = as.matrix(xtrain), y = y,
kernel = rbfdot, type = type, C = cost, kpar = 'automatic')
y <- trainset$Toxicity_Value
m = ksvm(x = as.matrix(xtrain), y = y,
kernel = rbfdot, type = type, C = cost, kpar = 'automatic')
library(caret)
library(mlbench)
library(randomForest)
library(parallel)
library(doParallel)
library(dplyr)
library(Metrics)
library(pROC)
library(kernlab)
setwd("~/Documents/Honours/R/Algo_Testing/SVM")
#function to calculate metrics
vanilpredmetrics <- function(testset, p, type, kernel, cost) {
length = length(ytest)
acc = 0
fp = 0
tp = 0
tn = 0
fn = 0
for (i in 1:length) {
realval = as.factor(testset$Toxicity_Value[i])
predval = p[i]
if (realval == TRUE) {
if (predval == realval) {
acc = acc + 1
tp = tp + 1
}
else {
fp = fp + 1
}
}
else {
if (predval == realval) {
acc = acc + 1
tn = tn + 1
}
else {
fn = fn + 1
}
}
}
acc = acc / nrow(testset)
f1 = (2 * tp) / ((2 * tp) + fp + fn)
mcc = 0
temp = sqrt((fp + tn) * (tp + fp) * (tp + fn) * (tn + fn))
if (temp != 0) {
mcc = ((tp * tn) - (fp * fn)) / temp
}
kapp = 0
temp = (( ( (tp + fp) * (fp + tn) ) + ( (tp + fn) * (fn + tn) ) ))
if (temp != 0) {
kapp =  ( 2 * ((tp * tn) - (fn * fp)) ) / temp
}
resultlist <- list(type = type, kernel = kernel, cost = cost,
tp = tp, tn = tn, fn = fn, fp = fp, acc = acc,
mcc = mcc, f1 = f1, kappa = kapp)
return(resultlist)
}
df <- read.csv("~/Documents/Honours/Data/Targetdata/autoencdata/dtargetautoencdata.csv")
seed <- 81
set.seed(seed)
#Sampling for testing
df <- sample_n(df[,0:(ncol(df))], 2000)
sampleset <- createDataPartition(df$Toxicity_Value, p=0.8, list=FALSE)
#Convert Toxicity_Value into a factor for the algorithm
#Numerical Binary (1,0) values are also altered to Categorical (T, F)
df$Toxicity_Value = as.factor(df$Toxicity_Value)
df$Toxicity_Value <- ifelse(df$Toxicity_Value == 1, "T", "F")
#Creating test and train sets
testset <- df[-sampleset,]
trainset <- df[sampleset,]
x <- trainset#[,2:ncol(trainset)]
y <- trainset$Toxicity_Value
xtrain <- x[,3:ncol(x)]
xtest <- testset[,3:ncol(testset)]
ytest <- as.factor(testset$Toxicity_Value)
#First for Kernels that do not have unique hyperparameters
#Creating dataframe to store results
#Tracks hyperparameters (cost, type) and confusion matrix variables
noparamresults <- data.frame(type = character(),
kernel = character(),
cost = numeric(),
tp = numeric(),
tn = numeric(),
fn = numeric(),
fp = numeric(),
acc = numeric(),
mcc = numeric(),
f1 = numeric(),
kappa = numeric(),
stringsAsFactors = FALSE)
#Setting Hyperparameters
types <- c('C-svc', 'nu-svc', 'C-bsvc', 'spoc-svc',
'kbb-svc', 'one-svc')
kernels <- c('vanilladot', 'laplacedot')
costs <- c(0.01, 0.1, 1, 100, 1000)
vals <- c()
m = ksvm(x = as.matrix(xtrain), y = y,
kernel = rbfdot, type = type, C = cost, kpar = 'automatic')
m = ksvm(x = as.matrix(xtrain), y = y,
kernel = 'rbfdot', type = 'C-svc', C = 0.01, kpar = 'automatic')
m = ksvm(x = as.matrix(xtrain), y = y,
kernel = 'rbfdot', type = 'C-svc', C = 0.01, kpar = 'automatic')
m = ksvm(x = as.matrix(xtrain), y = as.factor(y),
kernel = 'rbfdot', type = 'C-svc', C = 0.01, kpar = 'automatic')
p = predict(m, xtest)
resultlist <- vanilpredmetrics(testset, p, type, kernel, cost)
resultlist <- vanilpredmetrics(testset, p, 'C-svc', 'rbfdot', 0.01)
resultlist
m = ksvm(x = as.matrix(xtrain), y = as.factor(y),
kernel = 'rbfdot', type = 'C-svc', C = 0.01)
p = predict(m, xtest)
resultlist <- vanilpredmetrics(testset, p, 'C-svc', 'rbfdot', 0.01)
resultlist
View(xtrain)
