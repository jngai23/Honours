label = c("mtry", "ntree"))
RF$grid <- function(x, y, len = NULL, search = "grid") {}
RF$fit <- function(x, y, wts, param, lev, last, weights, classProbs, ...) {
randomForest(x, y, mtry = param$mtry, ntree=param$ntree, ...)
}
RF$predict <- function(modelFit, newdata, preProc = NULL, submodels = NULL)
predict(modelFit, newdata)
RF$prob <- function(modelFit, newdata, preProc = NULL, submodels = NULL)
predict(modelFit, newdata, type = "prob")
RF$sort <- function(x) x[order(x[,1]),]
RF$levels <- function(x) x$classes
#Parameter setting
candidates = c(25, 50)
treecount = c(100, 250)
#Testing a range of parameters
metric <- "Accuracy"
#Control tests for ROC, Sensitivity, Specificity
control <- trainControl(method="cv", number=10,
summaryFunction=twoClassSummary,
classProbs=TRUE,
savePredictions = 'all')
tunegrid <- expand.grid(.mtry=candidates, .ntree=treecount)
set.seed(seed)
#Trains the model on data using parameters set
custom <- train(Toxicity_Value~., data=x, method=RF,
metric=metric, tuneGrid=tunegrid,
trControl=control, na.action = na.exclude)
cl <- makePSOCKcluster(5)
registerDoParallel(cl)
seed <- 81
set.seed(seed)
#Data Reading
df <- UMAPdata
#Sampling for testing
df <- sample_n(df[,2:(ncol(df))], 1000)
sampleset <- createDataPartition(df$Toxicity_Value, p=0.8, list=FALSE)
#Convert Toxicity_Value into a factor for the algorithm
#Numerical Binary (1,0) values are also altered to Categorical (T, F)
df$Toxicity_Value <- ifelse(df$Toxicity_Value == 1, "T", "F")
df$Toxicity_Value = as.factor(df$Toxicity_Value)
#Creating test and train sets
testset <- df[-sampleset,]
trainset <- df[sampleset,]
x <- trainset[,2:ncol(trainset)]
y <- testset$Toxicity_Value
#Random Forest Algorithm initialisation
#Identical to Inbuilt RandomForest from caret but multiple variables can be tested
RF <- list(type = "Classification", library = "randomForest", loop = NULL)
RF$parameters <- data.frame(parameter = c("mtry", "ntree"),
class = rep("numeric", 2),
label = c("mtry", "ntree"))
RF$grid <- function(x, y, len = NULL, search = "grid") {}
RF$fit <- function(x, y, wts, param, lev, last, weights, classProbs, ...) {
randomForest(x, y, mtry = param$mtry, ntree=param$ntree, ...)
}
RF$predict <- function(modelFit, newdata, preProc = NULL, submodels = NULL)
predict(modelFit, newdata)
RF$prob <- function(modelFit, newdata, preProc = NULL, submodels = NULL)
predict(modelFit, newdata, type = "prob")
RF$sort <- function(x) x[order(x[,1]),]
RF$levels <- function(x) x$classes
#Parameter setting
candidates = c(25, 50)
treecount = c(100, 250)
#Testing a range of parameters
metric <- "Accuracy"
#Control tests for ROC, Sensitivity, Specificity
control <- trainControl(method="cv", number=10,
summaryFunction=twoClassSummary,
classProbs=TRUE,
savePredictions = 'all')
tunegrid <- expand.grid(.mtry=candidates, .ntree=treecount)
set.seed(seed)
#Trains the model on data using parameters set
custom <- train(Toxicity_Value~., data=x, method=RF, .combine=combine
metric=metric, tuneGrid=tunegrid,
#Trains the model on data using parameters set
custom <- train(Toxicity_Value~., data=x, method=RF, .combine=combine,
metric=metric, tuneGrid=tunegrid,
trControl=control, na.action = na.exclude)
registerDoParallel(cl)
stopCluster(cl)
confusegrid <- train(Toxicity_Value~., data=x, method="rf",
metric=metric, tuneGrid=tunegrid, trControl=control,
ntree=1500, na.action = na.exclude, allowParallel=TRUE)
tunegrid <- expand.grid(.mtry=mtry)
mtry <- 12
tunegrid <- expand.grid(.mtry=mtry)
confusegrid <- train(Toxicity_Value~., data=x, method="rf",
metric=metric, tuneGrid=tunegrid, trControl=control,
ntree=1500, na.action = na.exclude, allowParallel=TRUE)
seed <- 81
set.seed(seed)
#Data reading
#endodata <- read_csv("Documents/test/caret_stuff/final.csv")
endodata <- deepnormspedata
#Selecting data sample from set (~12000 datapoints)
headata <- sample_n(endodata[,2:(ncol(endodata))], 1000)
#Removes Null cells
#headata <- headata[, colSums(is.na(headata)) == 0]
headata$Toxicity_Value = as.factor(headata$Toxicity_Value)
deepnormspedata$Toxicity_Value = as.factor(deepnormspedata$Toxicity_Value)
#Removes Duplicate columns
#As each character in a SMILE is its own data point, if the longest SMILE is not
#In the sample, the extra columns need removing
duperemove <- function(data) {
dupecol <- sapply(data, function(col) length(unique(col)) == 1)
data[, !dupecol, drop = FALSE]
}
headata <- duperemove(headata)
colcount <- ncol(headata)
headsamp <- sample(1:nrow(headata), 0.8 * nrow(headata))
headtest <- headata[-headsamp,]
headtrain <- headata[headsamp,]
headtest <- duperemove(headtest)
headtrain <- duperemove(headtrain)
colcount <- ncol(headtrain)
x <- headtrain[,2:colcount]
y <- headtrain$Toxicity_Value
control <- trainControl(method="cv", number=10, repeats=3)
metric <- "Accuracy"
set.seed(seed)
mtry <- 12
tunegrid <- expand.grid(.mtry=mtry)
confusegrid <- train(Toxicity_Value~., data=headtrain, method="rf",
metric=metric, tuneGrid=tunegrid, trControl=control,
ntree=1500, na.action = na.exclude, allowParallel=TRUE)
metric <- "Accuracy"
set.seed(seed)
mtry <- 12
tunegrid <- expand.grid(.mtry=mtry)
confusegrid <- train(Toxicity_Value~., data=headtrain, method="rf",
metric=metric, tuneGrid=tunegrid, trControl=control,
ntree=1500, na.action = na.exclude, allowParallel=TRUE)
stopCluster(cl)
seed <- 81
stopCluster(cl)
cl <- makePSOCKcluster(5)
registerDoParallel(cl)
stopCluster(cl)
cl <- makePSOCKcluster(5)
registerDoParallel(cl)
mtry <- 12
tunegrid <- expand.grid(.mtry=mtry)
confusegrid <- train(Toxicity_Value~., data=headtrain, method="rf",
metric=metric, tuneGrid=tunegrid, trControl=control,
ntree=1500, na.action = na.exclude, allowParallel=TRUE)
print(confusegrid)
#Trains the model on data using parameters set
custom <- train(Toxicity_Value~., data=x, method=RF, .combine=combine,
metric=metric, tuneGrid=tunegrid,
trControl=control, na.action = na.exclude, allowParallel=TRUE)
cl <- makePSOCKcluster(5)
registerDoParallel(cl)
stopCluster(cl)
cl <- makePSOCKcluster(5)
registerDoParallel(cl)
seed <- 81
set.seed(seed)
#Data Reading
df <- UMAPdata
#Sampling for testing
df <- sample_n(df[,2:(ncol(df))], 1000)
sampleset <- createDataPartition(df$Toxicity_Value, p=0.8, list=FALSE)
#Convert Toxicity_Value into a factor for the algorithm
#Numerical Binary (1,0) values are also altered to Categorical (T, F)
df$Toxicity_Value <- ifelse(df$Toxicity_Value == 1, "T", "F")
df$Toxicity_Value = as.factor(df$Toxicity_Value)
#Creating test and train sets
testset <- df[-sampleset,]
trainset <- df[sampleset,]
x <- trainset[,2:ncol(trainset)]
y <- testset$Toxicity_Value
#Random Forest Algorithm initialisation
#Identical to Inbuilt RandomForest from caret but multiple variables can be tested
RF <- list(type = "Classification", library = "randomForest", loop = NULL)
RF$parameters <- data.frame(parameter = c("mtry", "ntree"),
class = rep("numeric", 2),
label = c("mtry", "ntree"))
RF$grid <- function(x, y, len = NULL, search = "grid") {}
RF$fit <- function(x, y, wts, param, lev, last, weights, classProbs, ...) {
randomForest(x, y, mtry = param$mtry, ntree=param$ntree, ...)
}
RF$predict <- function(modelFit, newdata, preProc = NULL, submodels = NULL)
predict(modelFit, newdata)
RF$prob <- function(modelFit, newdata, preProc = NULL, submodels = NULL)
predict(modelFit, newdata, type = "prob")
RF$sort <- function(x) x[order(x[,1]),]
RF$levels <- function(x) x$classes
#Parameter setting
candidates = c(25, 50)
treecount = c(100, 250)
#Testing a range of parameters
metric <- "Accuracy"
#Control tests for ROC, Sensitivity, Specificity
control <- trainControl(method="cv", number=10,
summaryFunction=twoClassSummary,
classProbs=TRUE,
savePredictions = 'all')
tunegrid <- expand.grid(.mtry=candidates, .ntree=treecount)
set.seed(seed)
#Trains the model on data using parameters set
custom <- train(Toxicity_Value~., data=x, method=RF, .combine=combine,
metric=metric, tuneGrid=tunegrid,
trControl=control, na.action = na.exclude, allowParallel=TRUE)
getModelInfo(randomForest())
getModelInfo('randomForest')
getModelInfo(model ='randomForest')
getModelInfo(model ='rf')
getModelInfo(model ='rf', regex = FALSE)
metric <- "Accuracy"
set.seed(seed)
mtry <- 12
tunegrid <- expand.grid(.mtry=mtry)
customRF <- list(type = "Classification", library = "randomForest", loop = NULL)
customRF$parameters <- data.frame(parameter = c("mtry", "ntree"), class = rep("numeric", 2), label = c("mtry", "ntree"))
customRF$grid <- function(x, y, len = NULL, search = "grid") {}
customRF$fit <- function(x, y, wts, param, lev, last, weights, classProbs, ...) {
randomForest(x, y, mtry = param$mtry, ntree=param$ntree, ...)
}
customRF$predict <- function(modelFit, newdata, preProc = NULL, submodels = NULL)
predict(modelFit, newdata)
customRF$prob <- function(modelFit, newdata, preProc = NULL, submodels = NULL)
predict(modelFit, newdata, type = "prob")
customRF$sort <- function(x) x[order(x[,1]),]
customRF$levels <- function(x) x$classes
customRF
#Parameter setting
candidates = c(25, 50)
treecount = c(100, 250)
#Testing a range of parameters
metric <- "Accuracy"
#Control tests for ROC, Sensitivity, Specificity
control <- trainControl(method="cv", number=10,
summaryFunction=twoClassSummary,
classProbs=TRUE,
savePredictions = 'all')
tunegrid <- expand.grid(.mtry=candidates, .ntree=treecount)
set.seed(seed)
cl <- makePSOCKcluster(5)
registerDoParallel(cl)
custom <- train(Toxicity_Value~., data=x, method=customRF, .combine=combine,
metric=metric, tuneGrid=tunegrid,
trControl=control, na.action = na.exclude, allowParallel=TRUE)
control <- trainControl(method="cv", number=10, repeats=3)
metric <- "Accuracy"
set.seed(seed)
mtry <- 12
tunegrid <- expand.grid(.mtry=mtry)
confusegrid <- train(Toxicity_Value~., data=headtrain, method="rf",
metric=metric, tuneGrid=tunegrid, trControl=control,
ntree=1500, na.action = na.exclude, allowParallel=TRUE)
confusegrid
#Control tests for ROC, Sensitivity, Specificity
control <- trainControl(method="cv", number=10,
summaryFunction=twoClassSummary,
classProbs=TRUE,
savePredictions = 'all',
allowParallel=TRUE)
#Parameter setting
candidates = c(25, 50)
treecount = c(100, 250)
#Testing a range of parameters
metric <- "Accuracy"
#Control tests for ROC, Sensitivity, Specificity
control <- trainControl(method="cv", number=10,
summaryFunction=twoClassSummary,
classProbs=TRUE,
savePredictions = 'all',
allowParallel=TRUE)
tunegrid <- expand.grid(.mtry=candidates, .ntree=treecount)
set.seed(seed)
#Trains the model on data using parameters set
custom <- train(Toxicity_Value~., data=x, method=RF, .combine=combine,
metric=metric, tuneGrid=tunegrid,
trControl=control, na.action = na.exclude)
warnings()
library(caret)
library(mlbench)
library(randomForest)
library(parallel)
library(doParallel)
library(dplyr)
library(Metrics)
library(pROC)
cl <- makePSOCKcluster(5)
registerDoParallel(cl)
seed <- 81
set.seed(seed)
#Data Reading
df <- UMAPdata
#Sampling for testing
df <- sample_n(df[,2:(ncol(df))], 1000)
sampleset <- createDataPartition(df$Toxicity_Value, p=0.8, list=FALSE)
#Convert Toxicity_Value into a factor for the algorithm
#Numerical Binary (1,0) values are also altered to Categorical (T, F)
df$Toxicity_Value <- ifelse(df$Toxicity_Value == 1, "T", "F")
df$Toxicity_Value = as.factor(df$Toxicity_Value)
#Creating test and train sets
testset <- df[-sampleset,]
trainset <- df[sampleset,]
x <- trainset[,2:ncol(trainset)]
y <- testset$Toxicity_Value
#Random Forest Algorithm initialisation
#Identical to Inbuilt RandomForest from caret but multiple variables can be tested
RF <- list(type = "Classification", library = "randomForest", loop = NULL)
RF$parameters <- data.frame(parameter = c("mtry", "ntree"),
class = rep("numeric", 2),
label = c("mtry", "ntree"))
RF$grid <- function(x, y, len = NULL, search = "grid") {}
RF$fit <- function(x, y, wts, param, lev, last, weights, classProbs, ...) {
randomForest(x, y, mtry = param$mtry, ntree=param$ntree, ...)
}
RF$predict <- function(modelFit, newdata, preProc = NULL, submodels = NULL)
predict(modelFit, newdata)
RF$prob <- function(modelFit, newdata, preProc = NULL, submodels = NULL)
predict(modelFit, newdata, type = "prob")
RF$sort <- function(x) x[order(x[,1]),]
RF$levels <- function(x) x$classes
#Parameter setting
candidates = c(25, 50)
treecount = c(100, 250)
#Testing a range of parameters
metric <- "Accuracy"
#Control tests for ROC, Sensitivity, Specificity
control <- trainControl(method="cv", number=10,
summaryFunction=twoClassSummary,
classProbs=TRUE,
savePredictions = 'all',
allowParallel=TRUE)
tunegrid <- expand.grid(.mtry=candidates, .ntree=treecount)
set.seed(seed)
#Trains the model on data using parameters set
custom <- train(Toxicity_Value~., data=x, method=RF, .combine=combine,
metric=metric, tuneGrid=tunegrid,
trControl=control, na.action = na.exclude)
#Control tests for ROC, Sensitivity, Specificity
control <- trainControl(method="cv", number=10,
summaryFunction=twoClassSummary,
classProbs=TRUE,
savePredictions = 'all',
allowParallel=TRUE)
tunegrid <- expand.grid(.mtry=candidates, .ntree=treecount)
set.seed(seed)
#Trains the model on data using parameters set
custom <- train(Toxicity_Value~., data=x, method=RF, .combine=combine,
metric=metric, tuneGrid=tunegrid,
trControl=control, na.action = na.exclude)
#Trains the model on data using parameters set
custom <- train(Toxicity_Value~., data=x, method=RF,
metric=metric, tuneGrid=tunegrid,
trControl=control, na.action = na.exclude)
x <- trainset[,2:ncol(trainset)]
y <- trainset$Toxicity_Value
tuneRF(x, y, mtryStart = 10, ntreeTry = 500)
tuneRF(x, y, mtryStart = 10, ntreeTry = 500, stepFactor=2, improve=0.05,
trace=TRUE, plot=TRUE, doBest=FALSE,)
y
tuneRF(x, y, mtryStart = 50, ntreeTry = 500, stepFactor=2, improve=0.05,
trace=TRUE, plot=TRUE, doBest=FALSE,)
tuneRF(x, y, mtryStart = 5, ntreeTry = 500, stepFactor=2, improve=0.05,
trace=TRUE, plot=TRUE, doBest=FALSE,)
x <- headtrain[,2:colcount]
y <- headtrain$Toxicity_Value
tuneRF(x, y, mtryStart = 5, ntreeTry = 500, stepFactor=2, improve=0.05,
trace=TRUE, plot=TRUE, doBest=FALSE,)
library(readr)
deepnormspedata <- read_csv("datasets/deepnormspedata.csv")
View(deepnormspedata)
library(caret)
library(mlbench)
library(randomForest)
library(parallel)
library(doParallel)
library(dplyr)
library(Metrics)
library(pROC)
seed <- 81
set.seed(seed)
#Data Reading
df <- deepnormspedata
#Sampling for testing
df <- sample_n(df[,2:(ncol(df))], 1000)
sampleset <- createDataPartition(df$Toxicity_Value, p=0.8, list=FALSE)
#Convert Toxicity_Value into a factor for the algorithm
#Numerical Binary (1,0) values are also altered to Categorical (T, F)
df$Toxicity_Value <- ifelse(df$Toxicity_Value == 1, "T", "F")
df$Toxicity_Value = as.factor(df$Toxicity_Value)
#Creating test and train sets
testset <- df[-sampleset,]
trainset <- df[sampleset,]
x <- trainset[,2:ncol(trainset)]
y <- trainset$Toxicity_Value
#Random Forest Algorithm initialisation
#Identical to Inbuilt RandomForest from caret but multiple variables can be tested
RF <- list(type = "Classification", library = "randomForest", loop = NULL)
RF$parameters <- data.frame(parameter = c("mtry", "ntree"),
class = rep("numeric", 2),
label = c("mtry", "ntree"))
RF$grid <- function(x, y, len = NULL, search = "grid") {}
RF$fit <- function(x, y, wts, param, lev, last, weights, classProbs, ...) {
randomForest(x, y, mtry = param$mtry, ntree=param$ntree, ...)
}
RF$predict <- function(modelFit, newdata, preProc = NULL, submodels = NULL)
predict(modelFit, newdata)
RF$prob <- function(modelFit, newdata, preProc = NULL, submodels = NULL)
predict(modelFit, newdata, type = "prob")
RF$sort <- function(x) x[order(x[,1]),]
RF$levels <- function(x) x$classes
#Parameter setting
candidates = c(25, 50)
treecount = c(100, 250)
#Testing a range of parameters
metric <- "Accuracy"
#Control tests for ROC, Sensitivity, Specificity
control <- trainControl(method="cv", number=10,
summaryFunction=twoClassSummary,
classProbs=TRUE,
savePredictions = 'all',
allowParallel=TRUE)
tunegrid <- expand.grid(.mtry=candidates, .ntree=treecount)
set.seed(seed)
#Trains the model on data using parameters set
custom <- train(Toxicity_Value~., data=x, method=RF,
metric=metric, tuneGrid=tunegrid,
trControl=control, na.action = na.exclude)
x <- trainset#[,2:ncol(trainset)]
y <- trainset$Toxicity_Value
#Random Forest Algorithm initialisation
#Identical to Inbuilt RandomForest from caret but multiple variables can be tested
RF <- list(type = "Classification", library = "randomForest", loop = NULL)
RF$parameters <- data.frame(parameter = c("mtry", "ntree"),
class = rep("numeric", 2),
label = c("mtry", "ntree"))
RF$grid <- function(x, y, len = NULL, search = "grid") {}
RF$fit <- function(x, y, wts, param, lev, last, weights, classProbs, ...) {
randomForest(x, y, mtry = param$mtry, ntree=param$ntree, ...)
}
RF$predict <- function(modelFit, newdata, preProc = NULL, submodels = NULL)
predict(modelFit, newdata)
RF$prob <- function(modelFit, newdata, preProc = NULL, submodels = NULL)
predict(modelFit, newdata, type = "prob")
RF$sort <- function(x) x[order(x[,1]),]
RF$levels <- function(x) x$classes
#Parameter setting
candidates = c(25, 50)
treecount = c(100, 250)
#Testing a range of parameters
metric <- "Accuracy"
#Control tests for ROC, Sensitivity, Specificity
control <- trainControl(method="cv", number=10,
summaryFunction=twoClassSummary,
classProbs=TRUE,
savePredictions = 'all',
allowParallel=TRUE)
tunegrid <- expand.grid(.mtry=candidates, .ntree=treecount)
set.seed(seed)
#Trains the model on data using parameters set
custom <- train(Toxicity_Value~., data=x, method=RF,
metric=metric, tuneGrid=tunegrid,
trControl=control, na.action = na.exclude)
View(x)
stopCluster(cl)
seed <- 81
set.seed(seed)
#Data Reading
df <- deepnormspedata
#Sampling for testing
df <- sample_n(df[,2:(ncol(df))], 1000)
sampleset <- createDataPartition(df$Toxicity_Value, p=0.8, list=FALSE)
#Convert Toxicity_Value into a factor for the algorithm
#Numerical Binary (1,0) values are also altered to Categorical (T, F)
df$Toxicity_Value <- ifelse(df$Toxicity_Value == 1, "T", "F")
df$Toxicity_Value = as.factor(df$Toxicity_Value)
#Creating test and train sets
testset <- df[-sampleset,]
trainset <- df[sampleset,]
x <- trainset#[,2:ncol(trainset)]
y <- trainset$Toxicity_Value
#Random Forest Algorithm initialisation
#Identical to Inbuilt RandomForest from caret but multiple variables can be tested
RF <- list(type = "Classification", library = "randomForest", loop = NULL)
RF$parameters <- data.frame(parameter = c("mtry", "ntree"),
class = rep("numeric", 2),
label = c("mtry", "ntree"))
RF$grid <- function(x, y, len = NULL, search = "grid") {}
RF$fit <- function(x, y, wts, param, lev, last, weights, classProbs, ...) {
randomForest(x, y, mtry = param$mtry, ntree=param$ntree, ...)
}
RF$predict <- function(modelFit, newdata, preProc = NULL, submodels = NULL)
predict(modelFit, newdata)
RF$prob <- function(modelFit, newdata, preProc = NULL, submodels = NULL)
predict(modelFit, newdata, type = "prob")
RF$sort <- function(x) x[order(x[,1]),]
RF$levels <- function(x) x$classes
#Parameter setting
candidates = c(25, 50)
treecount = c(100, 250)
#Testing a range of parameters
metric <- "Accuracy"
#Control tests for ROC, Sensitivity, Specificity
control <- trainControl(method="cv", number=10,
summaryFunction=twoClassSummary,
classProbs=TRUE,
savePredictions = 'all',
allowParallel=TRUE)
tunegrid <- expand.grid(.mtry=candidates, .ntree=treecount)
set.seed(seed)
#Trains the model on data using parameters set
custom <- train(Toxicity_Value~., data=x, method=RF,
metric=metric, tuneGrid=tunegrid,
trControl=control, na.action = na.exclude)
